Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table =		10000
ii. Business table =		10000
iii. Category table =		10000
iv. Checkin table =		10000	
v. elite_years table =		10000
vi. friend table = 		10000
vii. hours table =		10000
viii. photo table = 		10000
ix. review table = 		10000
x. tip table = 			10000
xi. user table =		10000

SQL used:

SELECT 
    COUNT (*)
FROM 
    --attribute
    --business
    --category
    --checkin
    --elite_years
    --friend
    --hours
    --photo
    --review
    --tip
    user

Tables were commented out to return the single result for each table. 

Alternative solution:

SELECT
    (SELECT COUNT(*) FROM attribute) AS attribute_count,
    (SELECT COUNT(*) FROM business) AS business_count,  
    (SELECT COUNT(*) FROM category) AS category_count,
    (SELECT COUNT(*) FROM checkin) AS checkin_count,
    (SELECT COUNT(*) FROM elite_years) AS eliteyrs_count,
    (SELECT COUNT(*) FROM friend) AS friend_count,
    (SELECT COUNT(*) FROM hours) AS hours_count,
    (SELECT COUNT(*) FROM photo) AS photo_count,
    (SELECT COUNT(*) FROM review) AS review_count,
    (SELECT COUNT(*) FROM tip) AS tip_count,
    (SELECT COUNT(*) FROM user) AS user_count;
		
	+-----------------+----------------+----------------+---------------+----------------+--------------+-------------+-------------+--------------+-----------+------------+
	| attribute_count | business_count | category_count | checkin_count | eliteyrs_count | friend_count | hours_count | photo_count | review_count | tip_count | user_count |
	+-----------------+----------------+----------------+---------------+----------------+--------------+-------------+-------------+--------------+-----------+------------+
	|           10000 |          10000 |          10000 |         10000 |          10000 |        10000 |       10000 |       10000 |        10000 |     10000 |      10000 |
	+-----------------+----------------+----------------+---------------+----------------+--------------+-------------+-------------+--------------+-----------+------------+
	



2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

	i. Business = 		10000	|	Key id (Primary Key)
	ii. Hours =		1562	|	Key	business_id
	iii. Category =		2643	|	Key	business_id
	iv. Attribute =		1115	|	Key	business_id
	v. Review =		8090	|	Key	business_id
	vi. Checkin = 		493	|	Key	business_id
	vii. Photo =		6493	|	Key	business_id
	viii. Tip = 		3979	|	Key	business_id
	ix. User = 		10000	|	Key	id	
	x. Friend = 		11	|	Key	user_id
	xi. Elite_years =	2780	|	Key	user_id

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

	SQL query used:

	SELECT
		(SELECT COUNT(distinct id) FROM business) AS business,
		(SELECT COUNT(distinct business_id) FROM hours) AS hours,
		(SELECT COUNT(distinct business_id) FROM category) AS category,
		(SELECT COUNT(distinct business_id ) FROM attribute) AS attribute,
		(SELECT COUNT(distinct business_id) FROM review) AS review,
		(SELECT COUNT(distinct business_id) FROM checkin) AS checkin,
		(SELECT COUNT(distinct business_id) FROM photo) AS photo,
		(SELECT COUNT(distinct business_id) FROM tip) AS tip,
		(SELECT COUNT(distinct id) FROM user) AS user,
		(SELECT COUNT(distinct user_id) FROM friend) AS friend,
		(SELECT COUNT(distinct user_id) FROM elite_years) AS elite_years;
		
	Query result table shown below:
		
	+----------+-------+----------+-----------+--------+---------+-------+------+-------+--------+-------------+
	| business | hours | category | attribute | review | checkin | photo |  tip |  user | friend | elite_years |
	+----------+-------+----------+-----------+--------+---------+-------+------+-------+--------+-------------+
	|    10000 |  1562 |     2643 |      1115 |   8090 |     493 |  6493 | 3979 | 10000 |     11 |        2780 |
	+----------+-------+----------+-----------+--------+---------+-------+------+-------+--------+-------------+

Note this could be achieved also by querying each individual table as:

SELECT 
	COUNT (DISTINCT colum_name)
	FROM table_name 
	
eg:

SELECT 
    COUNT(distinct id) AS business
    FROM business 

Query result table shown below:

	| business |
	+----------+
	|    10000 |



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
	
	SELECT
    (SELECT COUNT(*) FROM user WHERE id IS NULL) AS id
    ,(SELECT COUNT(*) FROM user WHERE name IS NULL) AS name
    ,(SELECT COUNT(*) FROM user WHERE review_count IS NULL) AS review_count
    ,(SELECT COUNT(*) FROM user WHERE yelping_since IS NULL) AS yelping_since
    ,(SELECT COUNT(*) FROM user WHERE useful IS NULL) AS useful
    ,(SELECT COUNT(*) FROM user WHERE funny IS NULL) AS funny
    ,(SELECT COUNT(*) FROM user WHERE cool IS NULL) AS cool
    ,(SELECT COUNT(*) FROM user WHERE fans IS NULL) AS fans
    ,(SELECT COUNT(*) FROM user WHERE average_stars IS NULL) AS avg_stars
    ,(SELECT COUNT(*) FROM user WHERE compliment_hot IS NULL) AS comp_hot
    ,(SELECT COUNT(*) FROM user WHERE compliment_more IS NULL) AS comp_more
    ,(SELECT COUNT(*) FROM user WHERE compliment_profile IS NULL) AS comp_pro
    ,(SELECT COUNT(*) FROM user WHERE compliment_cute IS NULL) AS compliment_cute
    ,(SELECT COUNT(*) FROM user WHERE compliment_list IS NULL) AS comp_list
    ,(SELECT COUNT(*) FROM user WHERE compliment_note IS NULL) AS compliment_note
    ,(SELECT COUNT(*) FROM user WHERE compliment_plain IS NULL) AS compliment_plain
    ,(SELECT COUNT(*) FROM user WHERE compliment_cool IS NULL) AS compliment_cool
    ,(SELECT COUNT(*) FROM user WHERE compliment_funny IS NULL) AS compliment_funny
    ,(SELECT COUNT(*) FROM user WHERE compliment_writer IS NULL) AS compliment_writer
    ,(SELECT COUNT(*) FROM user WHERE compliment_photos IS NULL) AS comp_photo

	Results table: 

	+----+------+--------------+---------------+--------+-------+------+------+-----------+----------+-----------+----------+-----------------+-----------+-----------------+------------------+-----------------+------------------+-------------------+------------+
	| id | name | review_count | yelping_since | useful | funny | cool | fans | avg_stars | comp_hot | comp_more | comp_pro | compliment_cute | comp_list | compliment_note | compliment_plain | compliment_cool | compliment_funny | compliment_writer | comp_photo |
	+----+------+--------------+---------------+--------+-------+------+------+-----------+----------+-----------+----------+-----------------+-----------+-----------------+------------------+-----------------+------------------+-------------------+------------+
	|  0 |    0 |            0 |             0 |      0 |     0 |    0 |    0 |         0 |        0 |         0 |        0 |               0 |         0 |               0 |                0 |               0 |                0 |                 0 |          0 |
	+----+------+--------------+---------------+--------+-------+------+------+-----------+----------+-----------+----------+-----------------+-----------+-----------------+------------------+-----------------+------------------+-------------------+------------+

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1			max: 5			avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1.0			max: 5.0		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0			max: 2			avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1			max: 53			avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0			max: 2000		avg: 24.2995
		
Example SQL used:

	SELECT
		MIN (Review_count) AS Min_Stars,
		MAX (Review_count) AS Max_Stars,
		AVG (Review_count) AS Avg_Stars
	FROM
		User

5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT
		City,
		sum(review_count) AS Reviews
		
	FROM   
		Business
		
	GROUP BY
			City
			
	ORDER BY   
		sum(review_count) DESC
	
	Copy and Paste the Result Below:
	
	+-----------------+---------+
	| city            | Reviews |
	+-----------------+---------+
	| Las Vegas       |   82854 |
	| Phoenix         |   34503 |
	| Toronto         |   24113 |
	| Scottsdale      |   20614 |
	| Charlotte       |   12523 |
	| Henderson       |   10871 |
	| Tempe           |   10504 |
	| Pittsburgh      |    9798 |
	| Montréal        |    9448 |
	| Chandler        |    8112 |
	| Mesa            |    6875 |
	| Gilbert         |    6380 |
	| Cleveland       |    5593 |
	| Madison         |    5265 |
	| Glendale        |    4406 |
	| Mississauga     |    3814 |
	| Edinburgh       |    2792 |
	| Peoria          |    2624 |
	| North Las Vegas |    2438 |
	| Markham         |    2352 |
	| Champaign       |    2029 |
	| Stuttgart       |    1849 |
	| Surprise        |    1520 |
	| Lakewood        |    1465 |
	| Goodyear        |    1155 |
	+-----------------+---------+
	(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

	SELECT
		stars AS Star_Rating,
		SUM(review_count) AS Review_Count
		--city
		
	FROM
		business
		
	WHERE 
		city = "Avon"
		
	GROUP BY
		Star_Rating
		
	ORDER BY
		Star_Rating DESC


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

	+-------------+--------------+
	| Star_Rating | Review_Count |
	+-------------+--------------+
	|         5.0 |            3 |
	|         4.5 |           31 |
	|         4.0 |           21 |
	|         3.5 |           88 |
	|         2.5 |            6 |
	|         1.5 |           10 |
	+-------------+--------------+


ii. Beachwood

SQL code used to arrive at answer:

	SELECT
		stars AS Star_Rating,
		SUM(review_count) AS Review_Count
		--city
		
	FROM
		business
		
	WHERE 
		--city = "Avon"
		city = "Beachwood"
		
	GROUP BY
		Star_Rating
		
	ORDER BY
		Star_Rating DESC

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

	+-------------+--------------+
	| Star_Rating | Review_Count |
	+-------------+--------------+
	|         5.0 |           23 |
	|         4.5 |           17 |
	|         4.0 |           69 |
	|         3.5 |            6 |
	|         3.0 |           11 |
	|         2.5 |            3 |
	|         2.0 |            8 |
	+-------------+--------------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT
		id,
		name,
		review_count

	FROM 
		user

	ORDER BY 
		review_count DESC
    
	Limit 3
		
	Copy and Paste the Result Below:
		
	+------------------------+--------+--------------+
	| id                     | name   | review_count |
	+------------------------+--------+--------------+
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
	| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
	| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
	+------------------------+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	 - No, it does not appear that there is a correlation between the number of reviews and number of fans.
	 - This would suggest another vairable may influence the number of fans a reviewer attracts.
	 - Recommend further analysis to see if another variable such as useful, funny etc displays stronger correlation.

	SQL query:

	SELECT
		id,
		name,
		review_count,
		fans,

	FROM 
		user

	ORDER BY 
		fans DESC
	
	Results table:
	
	+------------------------+-----------+--------------+------+
	| id                     | name      | review_count | fans |
	+------------------------+-----------+--------------+------+
	| -9I98YbNQnLdAmcYfb324Q | Amy       |          609 |  503 |
	| -8EnCioUmDygAbsYZmTeRQ | Mimi      |          968 |  497 |
	| --2vR0DIsmQ6WfcSzKWigw | Harald    |         1153 |  311 |
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |  253 |
	| -0IiMAZI2SsQ7VmyzJjokQ | Christine |          930 |  173 |
	| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |          813 |  159 |
	| -9bbDysuiWeo2VShFJJtcw | Cat       |          377 |  133 |
	| -FZBTkAZEXoP7CYvRV2ZwQ | William   |         1215 |  126 |
	| -9da1xk7zgnnfO1uTVYGkA | Fran      |          862 |  124 |
	| -lh59ko3dxChBSZ9U7LfUw | Lissa     |          834 |  120 |
	| -B-QEUESGWHPE_889WJaeg | Mark      |          861 |  115 |
	| -DmqnhW4Omr3YhmnigaqHg | Tiffany   |          408 |  111 |
	| -cv9PPT7IHux7XUc9dOpkg | bernice   |          255 |  105 |
	| -DFCC64NXgqrxlO8aLU5rg | Roanna    |         1039 |  104 |
	| -IgKkE8JvYNWeGu8ze4P8Q | Angela    |          694 |  101 |
	| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |         1246 |  101 |
	| -4viTt9UC44lWCFJwleMNQ | Ben       |          307 |   96 |
	| -3i9bhfvrM3F1wsC9XIB8g | Linda     |          584 |   89 |
	| -kLVfaJytOJY2-QdQoCcNQ | Christina |          842 |   85 |
	| -ePh4Prox7ZXnEBNGKyUEA | Jessica   |          220 |   84 |
	| -4BEUkLvHQntN6qPfKJP2w | Greg      |          408 |   81 |
	| -C-l8EHSLXtZZVfUAUhsPA | Nieves    |          178 |   80 |
	| -dw8f7FLaUmWR7bfJ_Yf0w | Sui       |          754 |   78 |
	| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |         1339 |   76 |
	| -0zEEaDFIjABtPQni0XlHA | Nicole    |          161 |   73 |
	+------------------------+-----------+--------------+------+
	(Output limit exceeded, 25 of 10000 total rows shown)


9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
			+------+------+
			| Hate | Love |
			+------+------+
			|  232 | 1780 |
			+------+------+
	
	SQL code used to arrive at answer:
	
	SELECT
		(SELECT COUNT (*) FROM review WHERE text LIKE "%hate%") AS Hate,
		(SELECT COUNT (*) FROM review WHERE text LIKE "%love%") AS Love;

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	SELECT
		id,
		name,
		fans

	FROM
		user

	ORDER BY 
		fans DESC
		
	LIMIT 10
	
	Copy and Paste the Result Below:

	+------------------------+-----------+------+
	| id                     | name      | fans |
	+------------------------+-----------+------+
	| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
	| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
	| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
	| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
	| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
	| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
	| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
	| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
	| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
	+------------------------+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. 
Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
	City selected 		= Las Vegas
	Category selected 	= Shopping
	
i. 	Do the two groups you chose to analyze have a different distribution of hours?
	
	Answers
	 - Three of the four busiesses share the same opening day - Saturday (Walgreens, Wooly Wonders, Red Rock Canyon Visitor Centre).
	 - One of the four business has a unique opening day - Monday (Desert Medical Equipment).
	 - All four business are open in day time hours, the only business with hours extending into the evening is Walgreens.

	+--------------------------------+----------+-------------+--------------+----------------------+
	| Business_Name                  | Category | Stars_Given | Review_Count | Opening_Hrs          |
	+--------------------------------+----------+-------------+--------------+----------------------+
	| Walgreens                      | Shopping |         2.5 |            6 | Saturday|8:00-22:00  |
	| Wooly Wonders                  | Shopping |         3.5 |           11 | Saturday|10:00-16:00 |
	| Red Rock Canyon Visitor Center | Shopping |         4.5 |           32 | Saturday|8:00-16:30  |
	| Desert Medical Equipment       | Shopping |         5.0 |            4 | Monday|8:00-17:00    |
	+--------------------------------+----------+-------------+--------------+----------------------+


ii. Do the two groups you chose to analyze have a different number of reviews?
	
	Answers
	 - Yes, the two groups show different numbers of reviews
	 - 2-3 Stars = 17 reviews (rounding down stars given)
	 - 4-5 Stars = 35 reviews 
	 - Could this suggest that people are more inclined to leave a review if their experience was positive? 
	

	+--------------------------------+----------+-------------+--------------+----------------------+
	| Business_Name                  | Category | Stars_Given | Review_Count | Opening_Hrs          |
	+--------------------------------+----------+-------------+--------------+----------------------+
	| Walgreens                      | Shopping |         2.5 |            6 | Saturday|8:00-22:00  |
	| Wooly Wonders                  | Shopping |         3.5 |           11 | Saturday|10:00-16:00 |
	| Red Rock Canyon Visitor Center | Shopping |         4.5 |           32 | Saturday|8:00-16:30  |
	| Desert Medical Equipment       | Shopping |         5.0 |            4 | Monday|8:00-17:00    |
	+--------------------------------+----------+-------------+--------------+----------------------+
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

	Answers
	 - Yes. The two business receiving less than 4 stars share the same Post Code indicating that they are located near each other (Wallgreens and Wolly Wonders 89121)
	 - The same two business share the same street address

	+--------------------------------+----------+-------------+--------------+----------------------+-----------+-----------------------------+-----------+
	| Business_Name                  | Category | Stars_Given | Review_Count | Opening_Hrs          | City      | Address                     | Post_Code |
	+--------------------------------+----------+-------------+--------------+----------------------+-----------+-----------------------------+-----------+
	| Walgreens                      | Shopping |         2.5 |            6 | Saturday|8:00-22:00  | Las Vegas | 3808 E Tropicana Ave        | 89121     |
	| Wooly Wonders                  | Shopping |         3.5 |           11 | Saturday|10:00-16:00 | Las Vegas | 3421 E Tropicana Ave, Ste I | 89121     |
	| Red Rock Canyon Visitor Center | Shopping |         4.5 |           32 | Saturday|8:00-16:30  | Las Vegas | 1000 Scenic Loop Dr         | 89161     |
	| Desert Medical Equipment       | Shopping |         5.0 |            4 | Monday|8:00-17:00    | Las Vegas | 3555 W Reno Ave, Ste F      | 89118     |
	+--------------------------------+----------+-------------+--------------+----------------------+-----------+-----------------------------+-----------+


	SQL code used for analysis:

	SELECT
		name AS Business_Name,
		category.category AS Category,
		stars AS Stars_Given,
		review_count AS Review_Count, 
		hours.hours AS Opening_Hrs,
		city AS City,
		address AS Address,
		postal_code AS Post_Code

	FROM
		business 
			inner join category on business.id=category.business_id
			inner join hours on business.id= hours.business_id

	WHERE
		business.city is 'Las Vegas' 
		And category.category is 'Shopping'

	GROUP BY
		 stars
		 
	+--------------------------------+----------+-------------+--------------+----------------------+-----------+-----------------------------+-----------+
	| Business_Name                  | Category | Stars_Given | Review_Count | Opening_Hrs          | City      | Address                     | Post_Code |
	+--------------------------------+----------+-------------+--------------+----------------------+-----------+-----------------------------+-----------+
	| Walgreens                      | Shopping |         2.5 |            6 | Saturday|8:00-22:00  | Las Vegas | 3808 E Tropicana Ave        | 89121     |
	| Wooly Wonders                  | Shopping |         3.5 |           11 | Saturday|10:00-16:00 | Las Vegas | 3421 E Tropicana Ave, Ste I | 89121     |
	| Red Rock Canyon Visitor Center | Shopping |         4.5 |           32 | Saturday|8:00-16:30  | Las Vegas | 1000 Scenic Loop Dr         | 89161     |
	| Desert Medical Equipment       | Shopping |         5.0 |            4 | Monday|8:00-17:00    | Las Vegas | 3555 W Reno Ave, Ste F      | 89118     |
	+--------------------------------+----------+-------------+--------------+----------------------+-----------+-----------------------------+-----------+
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
        
		Answer:
		Closed businesses received lower Star ratings (3.5) Vs. business still operating (3.7).
		Closed 3.5 Vs Open 3.7.
         
ii. Difference 2:
         
		 Answer:
		 Closed businesses received a lower average review score (23.2) Vs business still operatig (31.8).
         
iii. Further observation:

		Busines still operating have recived a far higher number of reviews (269300) that business that have closed (35261).
		This could simply be due to the fact that business still open have remained in operation longer, therefore have the opportunity to receive more reviews. 
		

SQL code used for analysis:

	SELECT 
		COUNT (Id) AS Count_of_Businesses,
		is_open AS Open_Closed,
		ROUND(AVG(stars),1) AS Average_Stars,
		SUM(review_count) AS Review_Count,
		ROUND (AVG(review_count),1) AS Average_Review

	FROM 
		business

	GROUP BY 
		is_open
		
	+---------------------+-------------+---------------+--------------+----------------+
	| Count_of_Businesses | Open_Closed | Average_Stars | Review_Count | Average_Review |
	+---------------------+-------------+---------------+--------------+----------------+
	|                1520 |           0 |           3.5 |        35261 |           23.2 |
	|                8480 |           1 |           3.7 |       269300 |           31.8 |
	+---------------------+-------------+---------------+--------------+----------------+
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: 
Parsing out keywords and business attributes for sentiment analysis, 
clustering businesses to find commonalities or anomalies between them, 
predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. 
These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. 
Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
		 Business Question:
		 What are the top 10 categories of businesses are most frequently given 4.5 stars and above?
		 Are there any commonalities?
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
   
		Data required: 
		category, a count of the number of businesses per category, an average of the number of stars given and a sum of the number of reviews given.
		A join will be required between the business table and the category table using id as a key.
		The data will need to be grouped by category.
		A having clause will be used to restrict the data set to Average Stars >= 4.5.
		I am interested in the number of companies by category, so the data will require an Order By clause.
		Limit 10 will cut the data set down to the top 10 entries (when combined with the Having clause).
                  
iii. Output of your finished dataset:
		
	The data set shows that Automotive/Vehicle related categories of business dominate the top ten with four entries.
   
	+------------------+-----------------+---------------+---------------+
	| Type_of_Business | No_of_Companies | Average_Stars | No_of_Reviews |
	+------------------+-----------------+---------------+---------------+
	| Automotive       |               9 |           4.5 |           198 |
	| Auto Repair      |               4 |          4.63 |           122 |
	| Fashion          |               4 |          4.63 |            21 |
	| Chiropractors    |               3 |           5.0 |            42 |
	| Carpet Cleaning  |               3 |          4.67 |            20 |
	| Desserts         |               3 |           4.5 |           107 |
	| Auto Detailing   |               2 |           5.0 |            61 |
	| Car Wash         |               2 |           5.0 |            61 |
	| Education        |               2 |          4.75 |            37 |
	| Hair Removal     |               2 |          4.75 |            32 |
	+------------------+-----------------+---------------+---------------+
         
iv. Provide the SQL code you used to create your final dataset:

	SELECT  
		category AS Type_of_Business, 
		count(distinct id) AS No_of_Companies, 
		round(avg(stars),2) AS Average_Stars,
		sum(review_count) AS No_of_Reviews

	FROM 
		business
			JOIN category ON business.id = category.business_id

	GROUP BY 
		category

	HAVING
		 Average_Stars >= 4.5

	ORDER BY 
		No_of_Companies DESC,
		Average_Stars DESC,
		No_of_Reviews DESC

	LIMIT 10
